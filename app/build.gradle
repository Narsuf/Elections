apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply from : '../constants.gradle'

jacoco { toolVersion = '0.8.8' }

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(
            dir: "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree], [kotlinDebugTree])
    executionData.from = fileTree(dir: "${buildDir}/outputs", includes: [
            'unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ])
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.jorgedguezm.elections"
        minSdkVersion 23
        targetSdkVersion 32
        multiDexEnabled true
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug { testCoverageEnabled true }
    }

    buildFeatures { viewBinding true }

    testOptions {
        unitTests { includeAndroidResources = true }
    }
}

repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.google.android.material:material:1.5.0'
    implementation "androidx.fragment:fragment-ktx:1.4.1"
    implementation 'androidx.multidex:multidex:2.0.1'

    // Lottie
    //implementation 'com.airbnb.android:lottie:2.8.0'

    // Dagger 2
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    // Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"

    // Android Jetpack

        // Room
        implementation "androidx.room:room-runtime:$roomVersion"
        implementation "androidx.room:room-ktx:$roomVersion"
        kapt "androidx.room:room-compiler:$roomVersion"

        // Lifecycle
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    // MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Timber
    implementation "com.jakewharton.timber:timber:4.7.1"

    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.robolectric:robolectric:4.5'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.1"
    testImplementation "org.mockito:mockito-core:4.0.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
