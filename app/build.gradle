plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
}

apply from : '../constants.gradle'

//region Jacoco
jacoco { toolVersion = '0.8.10' }

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.required.set(true)
        html { enabled true }
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Binding*.*',
            '**/injection/**'
    ]
    def debugTree = fileTree(
            dir: "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree], [kotlinDebugTree])
    executionData.from = fileTree(dir: "${buildDir}/outputs", includes: [
            'unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ])
}
//endregion

android {

    defaultConfig {
        compileSdk sdkV
        applicationId "com.n27.elections"
        minSdkVersion minSdkV
        targetSdkVersion sdkV
        multiDexEnabled true
        versionCode 20
        versionName "1.2.0"
        testInstrumentationRunner "com.n27.test.TestRunner"
        resourceConfigurations += ['en', 'es', 'ca']
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "$kotlinCompilerV"
    }

    testOptions {
        unitTests { includeAndroidResources = true }
    }

    namespace 'com.n27.elections'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions { jvmTarget = '17' }
}

repositories {
    google()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation project(":libraries:core")
    implementation project(":features:regional_live")

    // Dagger 2
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    testImplementation project(':libraries:test')
    testImplementation "androidx.test:core:$testVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    androidTestImplementation project(':libraries:test')
    androidTestImplementation "androidx.test.ext:junit:$junitVersion"
    androidTestImplementation "com.adevinta.android:barista:$baristaVersion"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
}
